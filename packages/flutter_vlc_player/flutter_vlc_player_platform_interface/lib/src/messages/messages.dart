// Autogenerated from Pigeon (v0.2.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types
// @dart = 2.12
import 'dart:async';
import 'dart:typed_data' show Uint8List, Int32List, Int64List, Float64List;

import 'package:flutter/services.dart';

// ignore: prefer-match-file-name
class CreateMessage {
  int? viewId;
  String? uri;
  int? type;
  String? packageName;
  bool? autoPlay;
  int? hwAcc;
  List<Object?>? options;

  CreateMessage();

  CreateMessage.decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    viewId = pigeonMap['viewId'] as int?;
    uri = pigeonMap['uri'] as String?;
    type = pigeonMap['type'] as int?;
    packageName = pigeonMap['packageName'] as String?;
    autoPlay = pigeonMap['autoPlay'] as bool?;
    hwAcc = pigeonMap['hwAcc'] as int?;
    options = pigeonMap['options'] as List<Object?>?;
  }

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['viewId'] = viewId;
    pigeonMap['uri'] = uri;
    pigeonMap['type'] = type;
    pigeonMap['packageName'] = packageName;
    pigeonMap['autoPlay'] = autoPlay;
    pigeonMap['hwAcc'] = hwAcc;
    pigeonMap['options'] = options;

    return pigeonMap;
  }
}

class ViewMessage {
  int? viewId;

  ViewMessage();

  ViewMessage.decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;

    viewId = pigeonMap['viewId'] as int?;
  }

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['viewId'] = viewId;

    return pigeonMap;
  }
}

class SetMediaMessage {
  int? viewId;
  String? uri;
  int? type;
  String? packageName;
  bool? autoPlay;
  int? hwAcc;

  SetMediaMessage();

  SetMediaMessage.decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    viewId = pigeonMap['viewId'] as int?;
    uri = pigeonMap['uri'] as String?;
    type = pigeonMap['type'] as int?;
    packageName = pigeonMap['packageName'] as String?;
    autoPlay = pigeonMap['autoPlay'] as bool?;
    hwAcc = pigeonMap['hwAcc'] as int?;
  }

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['viewId'] = viewId;
    pigeonMap['uri'] = uri;
    pigeonMap['type'] = type;
    pigeonMap['packageName'] = packageName;
    pigeonMap['autoPlay'] = autoPlay;
    pigeonMap['hwAcc'] = hwAcc;

    return pigeonMap;
  }
}

class BooleanMessage {
  int? viewId;
  bool? result;

  BooleanMessage();

  BooleanMessage.decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    viewId = pigeonMap['viewId'] as int?;
    result = pigeonMap['result'] as bool?;
  }

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['viewId'] = viewId;
    pigeonMap['result'] = result;

    return pigeonMap;
  }
}

class LoopingMessage {
  int? viewId;
  bool? isLooping;

  LoopingMessage();

  LoopingMessage.decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    viewId = pigeonMap['viewId'] as int?;
    isLooping = pigeonMap['isLooping'] as bool?;
  }

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['viewId'] = viewId;
    pigeonMap['isLooping'] = isLooping;

    return pigeonMap;
  }
}

class PositionMessage {
  int? viewId;
  int? position;

  PositionMessage();

  PositionMessage.decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    viewId = pigeonMap['viewId'] as int?;
    position = pigeonMap['position'] as int?;
  }

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['viewId'] = viewId;
    pigeonMap['position'] = position;

    return pigeonMap;
  }
}

class DurationMessage {
  int? viewId;
  int? duration;

  DurationMessage();

  DurationMessage.decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    viewId = pigeonMap['viewId'] as int?;
    duration = pigeonMap['duration'] as int?;
  }

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['viewId'] = viewId;
    pigeonMap['duration'] = duration;

    return pigeonMap;
  }
}

class VolumeMessage {
  int? viewId;
  int? volume;

  VolumeMessage();

  VolumeMessage.decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    viewId = pigeonMap['viewId'] as int?;
    volume = pigeonMap['volume'] as int?;
  }

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['viewId'] = viewId;
    pigeonMap['volume'] = volume;

    return pigeonMap;
  }
}

class PlaybackSpeedMessage {
  int? viewId;
  double? speed;

  PlaybackSpeedMessage();

  PlaybackSpeedMessage.decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    viewId = pigeonMap['viewId'] as int?;
    speed = pigeonMap['speed'] as double?;
  }

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['viewId'] = viewId;
    pigeonMap['speed'] = speed;

    return pigeonMap;
  }
}

class SnapshotMessage {
  int? viewId;
  String? snapshot;

  SnapshotMessage();
  SnapshotMessage.decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;

    viewId = pigeonMap['viewId'] as int?;
    snapshot = pigeonMap['snapshot'] as String?;
  }

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['viewId'] = viewId;
    pigeonMap['snapshot'] = snapshot;

    return pigeonMap;
  }
}

class TrackCountMessage {
  int? viewId;
  int? count;

  TrackCountMessage();

  TrackCountMessage.decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    viewId = pigeonMap['viewId'] as int?;
    count = pigeonMap['count'] as int?;
  }

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['viewId'] = viewId;
    pigeonMap['count'] = count;

    return pigeonMap;
  }
}

class SpuTracksMessage {
  int? viewId;
  Map<Object?, Object?>? subtitles;

  SpuTracksMessage();

  SpuTracksMessage.decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    viewId = pigeonMap['viewId'] as int?;
    subtitles = pigeonMap['subtitles'] as Map<Object?, Object?>?;
  }

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['viewId'] = viewId;
    pigeonMap['subtitles'] = subtitles;

    return pigeonMap;
  }
}

class SpuTrackMessage {
  int? viewId;
  int? spuTrackNumber;

  SpuTrackMessage();

  SpuTrackMessage.decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    viewId = pigeonMap['viewId'] as int?;
    spuTrackNumber = pigeonMap['spuTrackNumber'] as int?;
  }

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['viewId'] = viewId;
    pigeonMap['spuTrackNumber'] = spuTrackNumber;

    return pigeonMap;
  }
}

class DelayMessage {
  int? viewId;
  int? delay;

  DelayMessage();

  DelayMessage.decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    viewId = pigeonMap['viewId'] as int?;
    delay = pigeonMap['delay'] as int?;
  }

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['viewId'] = viewId;
    pigeonMap['delay'] = delay;

    return pigeonMap;
  }
}

class AddSubtitleMessage {
  int? viewId;
  String? uri;
  int? type;
  bool? isSelected;

  AddSubtitleMessage();

  AddSubtitleMessage.decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    viewId = pigeonMap['viewId'] as int?;
    uri = pigeonMap['uri'] as String?;
    type = pigeonMap['type'] as int?;
    isSelected = pigeonMap['isSelected'] as bool?;
  }

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['viewId'] = viewId;
    pigeonMap['uri'] = uri;
    pigeonMap['type'] = type;
    pigeonMap['isSelected'] = isSelected;

    return pigeonMap;
  }
}

class AudioTracksMessage {
  int? viewId;
  Map<Object?, Object?>? audios;

  AudioTracksMessage();

  AudioTracksMessage.decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    viewId = pigeonMap['viewId'] as int?;
    audios = pigeonMap['audios'] as Map<Object?, Object?>?;
  }

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['viewId'] = viewId;
    pigeonMap['audios'] = audios;

    return pigeonMap;
  }
}

class AudioTrackMessage {
  int? viewId;
  int? audioTrackNumber;

  AudioTrackMessage();
  AudioTrackMessage.decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    viewId = pigeonMap['viewId'] as int?;
    audioTrackNumber = pigeonMap['audioTrackNumber'] as int?;
  }

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['viewId'] = viewId;
    pigeonMap['audioTrackNumber'] = audioTrackNumber;

    return pigeonMap;
  }
}

class AddAudioMessage {
  int? viewId;
  String? uri;
  int? type;
  bool? isSelected;

  AddAudioMessage();

  AddAudioMessage.decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    viewId = pigeonMap['viewId'] as int?;
    uri = pigeonMap['uri'] as String?;
    type = pigeonMap['type'] as int?;
    isSelected = pigeonMap['isSelected'] as bool?;
  }

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['viewId'] = viewId;
    pigeonMap['uri'] = uri;
    pigeonMap['type'] = type;
    pigeonMap['isSelected'] = isSelected;

    return pigeonMap;
  }
}

class VideoTracksMessage {
  int? viewId;
  Map<Object?, Object?>? videos;

  VideoTracksMessage();

  VideoTracksMessage.decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    viewId = pigeonMap['viewId'] as int?;
    videos = pigeonMap['videos'] as Map<Object?, Object?>?;
  }

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['viewId'] = viewId;
    pigeonMap['videos'] = videos;

    return pigeonMap;
  }
}

class VideoTrackMessage {
  int? viewId;
  int? videoTrackNumber;

  VideoTrackMessage();

  VideoTrackMessage.decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    viewId = pigeonMap['viewId'] as int?;
    videoTrackNumber = pigeonMap['videoTrackNumber'] as int?;
  }

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['viewId'] = viewId;
    pigeonMap['videoTrackNumber'] = videoTrackNumber;

    return pigeonMap;
  }
}

class VideoScaleMessage {
  int? viewId;
  double? scale;

  VideoScaleMessage();

  VideoScaleMessage.decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    viewId = pigeonMap['viewId'] as int?;
    scale = pigeonMap['scale'] as double?;
  }

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['viewId'] = viewId;
    pigeonMap['scale'] = scale;

    return pigeonMap;
  }
}

class VideoAspectRatioMessage {
  int? viewId;
  String? aspectRatio;

  VideoAspectRatioMessage();

  VideoAspectRatioMessage.decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    viewId = pigeonMap['viewId'] as int?;
    aspectRatio = pigeonMap['aspectRatio'] as String?;
  }

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['viewId'] = viewId;
    pigeonMap['aspectRatio'] = aspectRatio;

    return pigeonMap;
  }
}

class RendererServicesMessage {
  int? viewId;
  List<Object?>? services;

  RendererServicesMessage();

  RendererServicesMessage.decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    viewId = pigeonMap['viewId'] as int?;
    services = pigeonMap['services'] as List<Object?>?;
  }

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['viewId'] = viewId;
    pigeonMap['services'] = services;

    return pigeonMap;
  }
}

class RendererScanningMessage {
  int? viewId;
  String? rendererService;

  RendererScanningMessage();

  RendererScanningMessage.decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    viewId = pigeonMap['viewId'] as int?;
    rendererService = pigeonMap['rendererService'] as String?;
  }

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['viewId'] = viewId;
    pigeonMap['rendererService'] = rendererService;

    return pigeonMap;
  }
}

class RendererDevicesMessage {
  int? viewId;
  Map<Object?, Object?>? rendererDevices;

  RendererDevicesMessage();

  RendererDevicesMessage.decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    viewId = pigeonMap['viewId'] as int?;
    rendererDevices = pigeonMap['rendererDevices'] as Map<Object?, Object?>?;
  }

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['viewId'] = viewId;
    pigeonMap['rendererDevices'] = rendererDevices;

    return pigeonMap;
  }
}

class RenderDeviceMessage {
  int? viewId;
  String? rendererDevice;

  RenderDeviceMessage();

  RenderDeviceMessage.decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    viewId = pigeonMap['viewId'] as int?;
    rendererDevice = pigeonMap['rendererDevice'] as String?;
  }

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['viewId'] = viewId;
    pigeonMap['rendererDevice'] = rendererDevice;

    return pigeonMap;
  }
}

class RecordMessage {
  int? viewId;
  String? saveDirectory;

  RecordMessage();

  RecordMessage.decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    viewId = pigeonMap['viewId'] as int?;
    saveDirectory = pigeonMap['saveDirectory'] as String?;
  }

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['viewId'] = viewId;
    pigeonMap['saveDirectory'] = saveDirectory;

    return pigeonMap;
  }
}

class VlcPlayerApi {
  final BinaryMessenger? _binaryMessenger;

  /// Constructor for [VlcPlayerApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  VlcPlayerApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;

  Future<void> initialize() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      'dev.flutter.pigeon.VlcPlayerApi.initialize',
      const StandardMessageCodec(),
      binaryMessenger: _binaryMessenger,
    );
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          replyMap['error'] as Map<Object?, Object?>? ?? {};
      throw PlatformException(
        code: error['code'] as String? ?? "",
        message: error['message'] as String?,
        details: error['details'],
      );
    }
  }

  Future<void> create(CreateMessage arg) async {
    final Object encoded = arg.encode();
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      'dev.flutter.pigeon.VlcPlayerApi.create',
      const StandardMessageCodec(),
      binaryMessenger: _binaryMessenger,
    );
    final Map<Object?, Object?>? replyMap =
        await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          replyMap['error'] as Map<Object?, Object?>? ?? {};
      throw PlatformException(
        code: error['code'] as String? ?? "",
        message: error['message'] as String?,
        details: error['details'],
      );
    }
  }

  Future<void> dispose(ViewMessage arg) async {
    final Object encoded = arg.encode();
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      'dev.flutter.pigeon.VlcPlayerApi.dispose',
      const StandardMessageCodec(),
      binaryMessenger: _binaryMessenger,
    );
    final Map<Object?, Object?>? replyMap =
        await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          replyMap['error'] as Map<Object?, Object?>? ?? {};
      throw PlatformException(
        code: error['code'] as String? ?? "",
        message: error['message'] as String?,
        details: error['details'],
      );
    }
  }

  Future<void> setStreamUrl(SetMediaMessage arg) async {
    final Object encoded = arg.encode();
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      'dev.flutter.pigeon.VlcPlayerApi.setStreamUrl',
      const StandardMessageCodec(),
      binaryMessenger: _binaryMessenger,
    );
    final Map<Object?, Object?>? replyMap =
        await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          replyMap['error'] as Map<Object?, Object?>? ?? {};
      throw PlatformException(
        code: error['code'] as String? ?? "",
        message: error['message'] as String?,
        details: error['details'],
      );
    }
  }

  Future<void> play(ViewMessage arg) async {
    final Object encoded = arg.encode();
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      'dev.flutter.pigeon.VlcPlayerApi.play',
      const StandardMessageCodec(),
      binaryMessenger: _binaryMessenger,
    );
    final Map<Object?, Object?>? replyMap =
        await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          replyMap['error'] as Map<Object?, Object?>? ?? {};
      throw PlatformException(
        code: error['code'] as String? ?? "",
        message: error['message'] as String?,
        details: error['details'],
      );
    }
  }

  Future<void> pause(ViewMessage arg) async {
    final Object encoded = arg.encode();
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      'dev.flutter.pigeon.VlcPlayerApi.pause',
      const StandardMessageCodec(),
      binaryMessenger: _binaryMessenger,
    );
    final Map<Object?, Object?>? replyMap =
        await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          replyMap['error'] as Map<Object?, Object?>? ?? {};
      throw PlatformException(
        code: error['code'] as String? ?? "",
        message: error['message'] as String?,
        details: error['details'],
      );
    }
  }

  Future<void> stop(ViewMessage arg) async {
    final Object encoded = arg.encode();
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      'dev.flutter.pigeon.VlcPlayerApi.stop',
      const StandardMessageCodec(),
      binaryMessenger: _binaryMessenger,
    );
    final Map<Object?, Object?>? replyMap =
        await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          replyMap['error'] as Map<Object?, Object?>? ?? {};
      throw PlatformException(
        code: error['code'] as String? ?? "",
        message: error['message'] as String?,
        details: error['details'],
      );
    }
  }

  Future<BooleanMessage> isPlaying(ViewMessage arg) async {
    final Object encoded = arg.encode();
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      'dev.flutter.pigeon.VlcPlayerApi.isPlaying',
      const StandardMessageCodec(),
      binaryMessenger: _binaryMessenger,
    );
    final Map<Object?, Object?>? replyMap =
        await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          replyMap['error'] as Map<Object?, Object?>? ?? {};
      throw PlatformException(
        code: error['code'] as String? ?? "",
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return BooleanMessage.decode(replyMap['result']!);
    }
  }

  Future<BooleanMessage> isSeekable(ViewMessage arg) async {
    final Object encoded = arg.encode();
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      'dev.flutter.pigeon.VlcPlayerApi.isSeekable',
      const StandardMessageCodec(),
      binaryMessenger: _binaryMessenger,
    );
    final Map<Object?, Object?>? replyMap =
        await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          replyMap['error'] as Map<Object?, Object?>? ?? {};
      throw PlatformException(
        code: error['code'] as String? ?? "",
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return BooleanMessage.decode(replyMap['result']!);
    }
  }

  Future<void> setLooping(LoopingMessage arg) async {
    final Object encoded = arg.encode();
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      'dev.flutter.pigeon.VlcPlayerApi.setLooping',
      const StandardMessageCodec(),
      binaryMessenger: _binaryMessenger,
    );
    final Map<Object?, Object?>? replyMap =
        await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          replyMap['error'] as Map<Object?, Object?>? ?? {};
      throw PlatformException(
        code: error['code'] as String? ?? "",
        message: error['message'] as String?,
        details: error['details'],
      );
    }
  }

  Future<void> seekTo(PositionMessage arg) async {
    final Object encoded = arg.encode();
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      'dev.flutter.pigeon.VlcPlayerApi.seekTo',
      const StandardMessageCodec(),
      binaryMessenger: _binaryMessenger,
    );
    final Map<Object?, Object?>? replyMap =
        await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          replyMap['error'] as Map<Object?, Object?>? ?? {};
      throw PlatformException(
        code: error['code'] as String? ?? "",
        message: error['message'] as String?,
        details: error['details'],
      );
    }
  }

  Future<PositionMessage> position(ViewMessage arg) async {
    final Object encoded = arg.encode();
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      'dev.flutter.pigeon.VlcPlayerApi.position',
      const StandardMessageCodec(),
      binaryMessenger: _binaryMessenger,
    );
    final Map<Object?, Object?>? replyMap =
        await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          replyMap['error'] as Map<Object?, Object?>? ?? {};
      throw PlatformException(
        code: error['code'] as String? ?? "",
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return PositionMessage.decode(replyMap['result']!);
    }
  }

  Future<DurationMessage> duration(ViewMessage arg) async {
    final Object encoded = arg.encode();
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      'dev.flutter.pigeon.VlcPlayerApi.duration',
      const StandardMessageCodec(),
      binaryMessenger: _binaryMessenger,
    );
    final Map<Object?, Object?>? replyMap =
        await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          replyMap['error'] as Map<Object?, Object?>? ?? {};
      throw PlatformException(
        code: error['code'] as String? ?? "",
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return DurationMessage.decode(replyMap['result']!);
    }
  }

  Future<void> setVolume(VolumeMessage arg) async {
    final Object encoded = arg.encode();
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      'dev.flutter.pigeon.VlcPlayerApi.setVolume',
      const StandardMessageCodec(),
      binaryMessenger: _binaryMessenger,
    );
    final Map<Object?, Object?>? replyMap =
        await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          replyMap['error'] as Map<Object?, Object?>? ?? {};
      throw PlatformException(
        code: error['code'] as String? ?? "",
        message: error['message'] as String?,
        details: error['details'],
      );
    }
  }

  Future<VolumeMessage> getVolume(ViewMessage arg) async {
    final Object encoded = arg.encode();
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      'dev.flutter.pigeon.VlcPlayerApi.getVolume',
      const StandardMessageCodec(),
      binaryMessenger: _binaryMessenger,
    );
    final Map<Object?, Object?>? replyMap =
        await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          replyMap['error'] as Map<Object?, Object?>? ?? {};
      throw PlatformException(
        code: error['code'] as String? ?? "",
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return VolumeMessage.decode(replyMap['result']!);
    }
  }

  Future<void> setPlaybackSpeed(PlaybackSpeedMessage arg) async {
    final Object encoded = arg.encode();
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      'dev.flutter.pigeon.VlcPlayerApi.setPlaybackSpeed',
      const StandardMessageCodec(),
      binaryMessenger: _binaryMessenger,
    );
    final Map<Object?, Object?>? replyMap =
        await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          replyMap['error'] as Map<Object?, Object?>? ?? {};
      throw PlatformException(
        code: error['code'] as String? ?? "",
        message: error['message'] as String?,
        details: error['details'],
      );
    }
  }

  Future<PlaybackSpeedMessage> getPlaybackSpeed(ViewMessage arg) async {
    final Object encoded = arg.encode();
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      'dev.flutter.pigeon.VlcPlayerApi.getPlaybackSpeed',
      const StandardMessageCodec(),
      binaryMessenger: _binaryMessenger,
    );
    final Map<Object?, Object?>? replyMap =
        await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          replyMap['error'] as Map<Object?, Object?>? ?? {};
      throw PlatformException(
        code: error['code'] as String? ?? "",
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return PlaybackSpeedMessage.decode(replyMap['result']!);
    }
  }

  Future<SnapshotMessage> takeSnapshot(ViewMessage arg) async {
    final Object encoded = arg.encode();
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      'dev.flutter.pigeon.VlcPlayerApi.takeSnapshot',
      const StandardMessageCodec(),
      binaryMessenger: _binaryMessenger,
    );
    final Map<Object?, Object?>? replyMap =
        await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          replyMap['error'] as Map<Object?, Object?>? ?? {};
      throw PlatformException(
        code: error['code'] as String? ?? "",
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return SnapshotMessage.decode(replyMap['result']!);
    }
  }

  Future<TrackCountMessage> getSpuTracksCount(ViewMessage arg) async {
    final Object encoded = arg.encode();
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      'dev.flutter.pigeon.VlcPlayerApi.getSpuTracksCount',
      const StandardMessageCodec(),
      binaryMessenger: _binaryMessenger,
    );
    final Map<Object?, Object?>? replyMap =
        await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          replyMap['error'] as Map<Object?, Object?>? ?? {};
      throw PlatformException(
        code: error['code'] as String? ?? "",
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return TrackCountMessage.decode(replyMap['result']!);
    }
  }

  Future<SpuTracksMessage> getSpuTracks(ViewMessage arg) async {
    final Object encoded = arg.encode();
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      'dev.flutter.pigeon.VlcPlayerApi.getSpuTracks',
      const StandardMessageCodec(),
      binaryMessenger: _binaryMessenger,
    );
    final Map<Object?, Object?>? replyMap =
        await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          replyMap['error'] as Map<Object?, Object?>? ?? {};
      throw PlatformException(
        code: error['code'] as String? ?? "",
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return SpuTracksMessage.decode(replyMap['result']!);
    }
  }

  Future<void> setSpuTrack(SpuTrackMessage arg) async {
    final Object encoded = arg.encode();
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      'dev.flutter.pigeon.VlcPlayerApi.setSpuTrack',
      const StandardMessageCodec(),
      binaryMessenger: _binaryMessenger,
    );
    final Map<Object?, Object?>? replyMap =
        await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          replyMap['error'] as Map<Object?, Object?>? ?? {};
      throw PlatformException(
        code: error['code'] as String? ?? "",
        message: error['message'] as String?,
        details: error['details'],
      );
    }
  }

  Future<SpuTrackMessage> getSpuTrack(ViewMessage arg) async {
    final Object encoded = arg.encode();
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      'dev.flutter.pigeon.VlcPlayerApi.getSpuTrack',
      const StandardMessageCodec(),
      binaryMessenger: _binaryMessenger,
    );
    final Map<Object?, Object?>? replyMap =
        await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          replyMap['error'] as Map<Object?, Object?>? ?? {};
      throw PlatformException(
        code: error['code'] as String? ?? "",
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return SpuTrackMessage.decode(replyMap['result']!);
    }
  }

  Future<void> setSpuDelay(DelayMessage arg) async {
    final Object encoded = arg.encode();
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      'dev.flutter.pigeon.VlcPlayerApi.setSpuDelay',
      const StandardMessageCodec(),
      binaryMessenger: _binaryMessenger,
    );
    final Map<Object?, Object?>? replyMap =
        await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          replyMap['error'] as Map<Object?, Object?>? ?? {};
      throw PlatformException(
        code: error['code'] as String? ?? "",
        message: error['message'] as String?,
        details: error['details'],
      );
    }
  }

  Future<DelayMessage> getSpuDelay(ViewMessage arg) async {
    final Object encoded = arg.encode();
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      'dev.flutter.pigeon.VlcPlayerApi.getSpuDelay',
      const StandardMessageCodec(),
      binaryMessenger: _binaryMessenger,
    );
    final Map<Object?, Object?>? replyMap =
        await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          replyMap['error'] as Map<Object?, Object?>? ?? {};
      throw PlatformException(
        code: error['code'] as String? ?? "",
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return DelayMessage.decode(replyMap['result']!);
    }
  }

  Future<void> addSubtitleTrack(AddSubtitleMessage arg) async {
    final Object encoded = arg.encode();
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      'dev.flutter.pigeon.VlcPlayerApi.addSubtitleTrack',
      const StandardMessageCodec(),
      binaryMessenger: _binaryMessenger,
    );
    final Map<Object?, Object?>? replyMap =
        await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          replyMap['error'] as Map<Object?, Object?>? ?? {};
      throw PlatformException(
        code: error['code'] as String? ?? "",
        message: error['message'] as String?,
        details: error['details'],
      );
    }
  }

  Future<TrackCountMessage> getAudioTracksCount(ViewMessage arg) async {
    final Object encoded = arg.encode();
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      'dev.flutter.pigeon.VlcPlayerApi.getAudioTracksCount',
      const StandardMessageCodec(),
      binaryMessenger: _binaryMessenger,
    );
    final Map<Object?, Object?>? replyMap =
        await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          replyMap['error'] as Map<Object?, Object?>? ?? {};
      throw PlatformException(
        code: error['code'] as String? ?? "",
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return TrackCountMessage.decode(replyMap['result']!);
    }
  }

  Future<AudioTracksMessage> getAudioTracks(ViewMessage arg) async {
    final Object encoded = arg.encode();
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      'dev.flutter.pigeon.VlcPlayerApi.getAudioTracks',
      const StandardMessageCodec(),
      binaryMessenger: _binaryMessenger,
    );
    final Map<Object?, Object?>? replyMap =
        await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          replyMap['error'] as Map<Object?, Object?>? ?? {};
      throw PlatformException(
        code: error['code'] as String? ?? "",
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return AudioTracksMessage.decode(replyMap['result']!);
    }
  }

  Future<void> setAudioTrack(AudioTrackMessage arg) async {
    final Object encoded = arg.encode();
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      'dev.flutter.pigeon.VlcPlayerApi.setAudioTrack',
      const StandardMessageCodec(),
      binaryMessenger: _binaryMessenger,
    );
    final Map<Object?, Object?>? replyMap =
        await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          replyMap['error'] as Map<Object?, Object?>? ?? {};
      throw PlatformException(
        code: error['code'] as String? ?? "",
        message: error['message'] as String?,
        details: error['details'],
      );
    }
  }

  Future<AudioTrackMessage> getAudioTrack(ViewMessage arg) async {
    final Object encoded = arg.encode();
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      'dev.flutter.pigeon.VlcPlayerApi.getAudioTrack',
      const StandardMessageCodec(),
      binaryMessenger: _binaryMessenger,
    );
    final Map<Object?, Object?>? replyMap =
        await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          replyMap['error'] as Map<Object?, Object?>? ?? {};
      throw PlatformException(
        code: error['code'] as String? ?? "",
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return AudioTrackMessage.decode(replyMap['result']!);
    }
  }

  Future<void> setAudioDelay(DelayMessage arg) async {
    final Object encoded = arg.encode();
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      'dev.flutter.pigeon.VlcPlayerApi.setAudioDelay',
      const StandardMessageCodec(),
      binaryMessenger: _binaryMessenger,
    );
    final Map<Object?, Object?>? replyMap =
        await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          replyMap['error'] as Map<Object?, Object?>? ?? {};
      throw PlatformException(
        code: error['code'] as String? ?? "",
        message: error['message'] as String?,
        details: error['details'],
      );
    }
  }

  Future<DelayMessage> getAudioDelay(ViewMessage arg) async {
    final Object encoded = arg.encode();
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      'dev.flutter.pigeon.VlcPlayerApi.getAudioDelay',
      const StandardMessageCodec(),
      binaryMessenger: _binaryMessenger,
    );
    final Map<Object?, Object?>? replyMap =
        await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          replyMap['error'] as Map<Object?, Object?>? ?? {};
      throw PlatformException(
        code: error['code'] as String? ?? "",
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return DelayMessage.decode(replyMap['result']!);
    }
  }

  Future<void> addAudioTrack(AddAudioMessage arg) async {
    final Object encoded = arg.encode();
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      'dev.flutter.pigeon.VlcPlayerApi.addAudioTrack',
      const StandardMessageCodec(),
      binaryMessenger: _binaryMessenger,
    );
    final Map<Object?, Object?>? replyMap =
        await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          replyMap['error'] as Map<Object?, Object?>? ?? {};
      throw PlatformException(
        code: error['code'] as String? ?? "",
        message: error['message'] as String?,
        details: error['details'],
      );
    }
  }

  Future<TrackCountMessage> getVideoTracksCount(ViewMessage arg) async {
    final Object encoded = arg.encode();
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      'dev.flutter.pigeon.VlcPlayerApi.getVideoTracksCount',
      const StandardMessageCodec(),
      binaryMessenger: _binaryMessenger,
    );
    final Map<Object?, Object?>? replyMap =
        await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          replyMap['error'] as Map<Object?, Object?>? ?? {};
      throw PlatformException(
        code: error['code'] as String? ?? "",
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return TrackCountMessage.decode(replyMap['result']!);
    }
  }

  Future<VideoTracksMessage> getVideoTracks(ViewMessage arg) async {
    final Object encoded = arg.encode();
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      'dev.flutter.pigeon.VlcPlayerApi.getVideoTracks',
      const StandardMessageCodec(),
      binaryMessenger: _binaryMessenger,
    );
    final Map<Object?, Object?>? replyMap =
        await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          replyMap['error'] as Map<Object?, Object?>? ?? {};
      throw PlatformException(
        code: error['code'] as String? ?? "",
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return VideoTracksMessage.decode(replyMap['result']!);
    }
  }

  Future<void> setVideoTrack(VideoTrackMessage arg) async {
    final Object encoded = arg.encode();
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      'dev.flutter.pigeon.VlcPlayerApi.setVideoTrack',
      const StandardMessageCodec(),
      binaryMessenger: _binaryMessenger,
    );
    final Map<Object?, Object?>? replyMap =
        await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          replyMap['error'] as Map<Object?, Object?>? ?? {};
      throw PlatformException(
        code: error['code'] as String? ?? "",
        message: error['message'] as String?,
        details: error['details'],
      );
    }
  }

  Future<VideoTrackMessage> getVideoTrack(ViewMessage arg) async {
    final Object encoded = arg.encode();
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      'dev.flutter.pigeon.VlcPlayerApi.getVideoTrack',
      const StandardMessageCodec(),
      binaryMessenger: _binaryMessenger,
    );
    final Map<Object?, Object?>? replyMap =
        await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          replyMap['error'] as Map<Object?, Object?>? ?? {};
      throw PlatformException(
        code: error['code'] as String? ?? "",
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return VideoTrackMessage.decode(replyMap['result']!);
    }
  }

  Future<void> setVideoScale(VideoScaleMessage arg) async {
    final Object encoded = arg.encode();
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      'dev.flutter.pigeon.VlcPlayerApi.setVideoScale',
      const StandardMessageCodec(),
      binaryMessenger: _binaryMessenger,
    );
    final Map<Object?, Object?>? replyMap =
        await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          replyMap['error'] as Map<Object?, Object?>? ?? {};
      throw PlatformException(
        code: error['code'] as String? ?? "",
        message: error['message'] as String?,
        details: error['details'],
      );
    }
  }

  Future<VideoScaleMessage> getVideoScale(ViewMessage arg) async {
    final Object encoded = arg.encode();
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      'dev.flutter.pigeon.VlcPlayerApi.getVideoScale',
      const StandardMessageCodec(),
      binaryMessenger: _binaryMessenger,
    );
    final Map<Object?, Object?>? replyMap =
        await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          replyMap['error'] as Map<Object?, Object?>? ?? {};
      throw PlatformException(
        code: error['code'] as String? ?? "",
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return VideoScaleMessage.decode(replyMap['result']!);
    }
  }

  Future<void> setVideoAspectRatio(VideoAspectRatioMessage arg) async {
    final Object encoded = arg.encode();
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      'dev.flutter.pigeon.VlcPlayerApi.setVideoAspectRatio',
      const StandardMessageCodec(),
      binaryMessenger: _binaryMessenger,
    );
    final Map<Object?, Object?>? replyMap =
        await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          replyMap['error'] as Map<Object?, Object?>? ?? {};
      throw PlatformException(
        code: error['code'] as String? ?? "",
        message: error['message'] as String?,
        details: error['details'],
      );
    }
  }

  Future<VideoAspectRatioMessage> getVideoAspectRatio(ViewMessage arg) async {
    final Object encoded = arg.encode();
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      'dev.flutter.pigeon.VlcPlayerApi.getVideoAspectRatio',
      const StandardMessageCodec(),
      binaryMessenger: _binaryMessenger,
    );
    final Map<Object?, Object?>? replyMap =
        await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          replyMap['error'] as Map<Object?, Object?>? ?? {};
      throw PlatformException(
        code: error['code'] as String? ?? "",
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return VideoAspectRatioMessage.decode(replyMap['result']!);
    }
  }

  Future<RendererServicesMessage> getAvailableRendererServices(
    ViewMessage arg,
  ) async {
    final Object encoded = arg.encode();
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      'dev.flutter.pigeon.VlcPlayerApi.getAvailableRendererServices',
      const StandardMessageCodec(),
      binaryMessenger: _binaryMessenger,
    );
    final Map<Object?, Object?>? replyMap =
        await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          replyMap['error'] as Map<Object?, Object?>? ?? {};
      throw PlatformException(
        code: error['code'] as String? ?? "",
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return RendererServicesMessage.decode(replyMap['result']!);
    }
  }

  Future<void> startRendererScanning(RendererScanningMessage arg) async {
    final Object encoded = arg.encode();
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      'dev.flutter.pigeon.VlcPlayerApi.startRendererScanning',
      const StandardMessageCodec(),
      binaryMessenger: _binaryMessenger,
    );
    final Map<Object?, Object?>? replyMap =
        await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          replyMap['error'] as Map<Object?, Object?>? ?? {};
      throw PlatformException(
        code: error['code'] as String? ?? "",
        message: error['message'] as String?,
        details: error['details'],
      );
    }
  }

  Future<void> stopRendererScanning(ViewMessage arg) async {
    final Object encoded = arg.encode();
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      'dev.flutter.pigeon.VlcPlayerApi.stopRendererScanning',
      const StandardMessageCodec(),
      binaryMessenger: _binaryMessenger,
    );
    final Map<Object?, Object?>? replyMap =
        await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          replyMap['error'] as Map<Object?, Object?>? ?? {};
      throw PlatformException(
        code: error['code'] as String? ?? "",
        message: error['message'] as String?,
        details: error['details'],
      );
    }
  }

  Future<RendererDevicesMessage> getRendererDevices(ViewMessage arg) async {
    final Object encoded = arg.encode();
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      'dev.flutter.pigeon.VlcPlayerApi.getRendererDevices',
      const StandardMessageCodec(),
      binaryMessenger: _binaryMessenger,
    );
    final Map<Object?, Object?>? replyMap =
        await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          replyMap['error'] as Map<Object?, Object?>? ?? {};
      throw PlatformException(
        code: error['code'] as String? ?? "",
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return RendererDevicesMessage.decode(replyMap['result']!);
    }
  }

  Future<void> castToRenderer(RenderDeviceMessage arg) async {
    final Object encoded = arg.encode();
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      'dev.flutter.pigeon.VlcPlayerApi.castToRenderer',
      const StandardMessageCodec(),
      binaryMessenger: _binaryMessenger,
    );
    final Map<Object?, Object?>? replyMap =
        await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          replyMap['error'] as Map<Object?, Object?>? ?? {};
      throw PlatformException(
        code: error['code'] as String? ?? "",
        message: error['message'] as String?,
        details: error['details'],
      );
    }
  }

  Future<BooleanMessage> startRecording(RecordMessage arg) async {
    final Object encoded = arg.encode();
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      'dev.flutter.pigeon.VlcPlayerApi.startRecording',
      const StandardMessageCodec(),
      binaryMessenger: _binaryMessenger,
    );
    final Map<Object?, Object?>? replyMap =
        await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          replyMap['error'] as Map<Object?, Object?>? ?? {};
      throw PlatformException(
        code: error['code'] as String? ?? "",
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return BooleanMessage.decode(replyMap['result']!);
    }
  }

  Future<BooleanMessage> stopRecording(ViewMessage arg) async {
    final Object encoded = arg.encode();
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      'dev.flutter.pigeon.VlcPlayerApi.stopRecording',
      const StandardMessageCodec(),
      binaryMessenger: _binaryMessenger,
    );
    final Map<Object?, Object?>? replyMap =
        await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          replyMap['error'] as Map<Object?, Object?>? ?? {};
      throw PlatformException(
        code: error['code'] as String? ?? "",
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return BooleanMessage.decode(replyMap['result']!);
    }
  }
}
